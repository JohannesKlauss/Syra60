graph Voice
{
    input event (soul::note_events::NoteOn,
                 soul::note_events::NoteOff,
                 soul::note_events::PitchBend,
                 soul::note_events::Pressure,
                 soul::note_events::Slide) eventIn;

    input event float
        detuneFactorParam, sawLevelParam, subLevelParam, pulseLevelParam, pulseWidthModulationParam, noiseLevelParam, lfoPitchModulationParam,
        vcfCutoffParam, vcfResoParam, vcfEnvPolarityParam, vcfEnvModDepthParam, vcfLfoModDepthParam, vcfKeyModDepthParam, pulseWidthModModeParam,
        envAttack, envDecay, envSustain, envRelease;

    input stream float lfoValue;

    output stream float audioOut;

    let
    {
        voiceController = Syra60::Controller;
        dco = Syra60::DCO;
        noise = Syra60::Noise;
        vcf = Syra60::VCF;
        ampEnv = Syra60::ADSREnvelope;
        modEnv = Syra60::ADSREnvelope;

        mixer = Syra60::Mixer;

        whiteNoise = soul::noise::White;

        gain = VelocityEnvelopeGain;

        detuneFactor = ParameterStream;
        sawLevel = ParameterStream;
        subLevel = ParameterStream;
        pulseLevel = ParameterStream;
        pulseWidthModulation = ParameterStream;
        lfoPitchModulation = ParameterStream;
        noiseLevel = ParameterStream;
        vcfCutoff = ParameterStream;
        vcfReso = ParameterStream;
        vcfEnvModDepth = ParameterStream;
        vcfLfoModDepth = ParameterStream;
        vcfKeyModDepth = ParameterStream;
    }

    connection
    {
        detuneFactorParam -> detuneFactor.parameterUpdate;
        sawLevelParam -> sawLevel.parameterUpdate;
        pulseLevelParam -> pulseLevel.parameterUpdate;
        subLevelParam -> subLevel.parameterUpdate;
        pulseWidthModulationParam -> pulseWidthModulation.parameterUpdate;
        lfoPitchModulationParam -> lfoPitchModulation.parameterUpdate;
        noiseLevelParam -> noiseLevel.parameterUpdate;
        vcfCutoffParam -> vcfCutoff.parameterUpdate;
        vcfResoParam -> vcfReso.parameterUpdate;
        vcfEnvModDepthParam -> vcfEnvModDepth.parameterUpdate;
        vcfLfoModDepthParam -> vcfLfoModDepth.parameterUpdate;
        vcfKeyModDepthParam -> vcfKeyModDepth.parameterUpdate;

        eventIn -> voiceController.eventIn;

        envAttack -> ampEnv.attack, modEnv.attack;
        envDecay -> ampEnv.decay, modEnv.decay;
        envSustain -> ampEnv.sustain, modEnv.sustain;
        envRelease -> ampEnv.release, modEnv.release;

        voiceController.note1_frequencyOut -> dco.frequencyIn;
        voiceController.note1_active -> ampEnv.triggerLevel, modEnv.triggerLevel, vcf.triggerLevel;
        voiceController.note1_noteOut -> vcf.noteIn;
        voiceController.note1_velocity -> gain.velocityIn;

        ampEnv.envelopeLevel -> mixer.envelopeLevelIn, gain.envelopeLevelIn;
        modEnv.envelopeLevel -> dco.modEnvelopeLevelIn, vcf.envelopeLevelIn;

        lfoValue -> dco.lfoValueIn, vcf.lfoValueIn;

        vcfEnvPolarityParam -> vcf.envPolarity;
        pulseWidthModModeParam -> dco.pulseWidthModMode;

        sawLevel.audioOut -> dco.sawLevelIn, noise.sawLevelIn;
        subLevel.audioOut -> dco.subLevelIn, noise.subLevelIn;
        pulseLevel.audioOut -> dco.pulseLevelIn, noise.pulseLevelIn;
        detuneFactor.audioOut -> dco.detuneFactorIn;
        pulseWidthModulation.audioOut -> dco.pulseWidthModulationIn;
        lfoPitchModulation.audioOut -> dco.lfoPitchModulationIn;
        noiseLevel.audioOut -> noise.noiseLevelIn, dco.noiseLevelIn;
        whiteNoise.out -> noise.whiteNoiseIn;
        vcfCutoff.audioOut -> vcf.cutoffIn;
        vcfReso.audioOut -> vcf.resonanceIn;
        vcfEnvModDepth.audioOut -> vcf.envModDepthIn;
        vcfLfoModDepth.audioOut -> vcf.lfoModDepthIn;
        vcfKeyModDepth.audioOut -> vcf.keyModDepthIn;

        dco.audioOut -> mixer.dcoIn;
        noise.audioOut -> mixer.noiseIn;
        mixer.audioOut -> gain.audioIn;
        /*mixer.audioOut -> vcf.audioIn;
        vcf.audioOut -> gain.audioIn;*/
        gain -> audioOut;
    }
}
