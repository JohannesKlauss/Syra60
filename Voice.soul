graph Voice
{
    input event (soul::note_events::NoteOn,
                 soul::note_events::NoteOff,
                 soul::note_events::PitchBend,
                 soul::note_events::Pressure,
                 soul::note_events::Slide) eventIn;

    input event float
        detuneFactorParam, sawLevelParam, subLevelParam, pulseLevelParam, pulseWidthModulationParam, vcaLevelParam, noiseLevelParam, lfoPitchModulationParam, hpfFrequencyParam,
        envAttack, envDecay, envSustain, envRelease;

    input stream float lfoValue;

    output stream float audioOut;

    let
    {
        voiceController = Syra60::Controller;
        dco = Syra60::DCO;
        noise = Syra60::Noise;
        vca = Syra60::VCA;
        hpf = Syra60::SinglePoleFilter(true, 0.0f);
        ampEnv = Syra60::ADSREnvelope;
        modEnv = Syra60::ADSREnvelope;

        mixer = Syra60::Mixer;

        whiteNoise = soul::noise::White;

        detuneFactor = ParameterStream;
        sawLevel = ParameterStream;
        subLevel = ParameterStream;
        pulseLevel = ParameterStream;
        pulseWidthModulation = ParameterStream;
        lfoPitchModulation = ParameterStream;
        vcaLevel = ParameterStream;
        noiseLevel = ParameterStream;
        hpfFrequency = ParameterStream;
    }

    connection
    {
        detuneFactorParam -> detuneFactor.parameterUpdate;
        sawLevelParam -> sawLevel.parameterUpdate;
        pulseLevelParam -> pulseLevel.parameterUpdate;
        subLevelParam -> subLevel.parameterUpdate;
        pulseWidthModulationParam -> pulseWidthModulation.parameterUpdate;
        lfoPitchModulationParam -> lfoPitchModulation.parameterUpdate;
        vcaLevelParam -> vcaLevel.parameterUpdate;
        noiseLevelParam -> noiseLevel.parameterUpdate;
        hpfFrequencyParam -> hpfFrequency.parameterUpdate;

        eventIn -> voiceController.eventIn;

        envAttack -> ampEnv.attack, modEnv.attack;
        envDecay -> ampEnv.decay, modEnv.decay;
        envSustain -> ampEnv.sustain, modEnv.sustain;
        envRelease -> ampEnv.release, modEnv.release;

        voiceController.note1_frequencyOut -> dco.frequencyIn;

        voiceController.note1_active -> ampEnv.triggerLevel;
        ampEnv.envelopeLevel -> mixer.envelopeLevelIn;

        voiceController.note1_active -> modEnv.triggerLevel;
        modEnv.envelopeLevel -> dco.modEnvelopeLevelIn;

        lfoValue -> dco.lfoValueIn;

        sawLevel.audioOut -> dco.sawLevelIn;
        subLevel.audioOut -> dco.subLevelIn;
        pulseLevel.audioOut -> dco.pulseLevelIn;
        detuneFactor.audioOut -> dco.detuneFactorIn;
        pulseWidthModulation.audioOut -> dco.pulseWidthModulationIn;
        lfoPitchModulation.audioOut -> dco.lfoPitchModulationIn;
        vcaLevel.audioOut -> vca.levelIn;
        noiseLevel.audioOut -> noise.noiseLevelIn;
        whiteNoise.out -> noise.whiteNoiseIn;
        hpfFrequency.audioOut -> hpf.cutoffIn;

        dco.audioOut -> mixer.dcoIn;
        noise.audioOut -> mixer.noiseIn;
        mixer.audioOut -> hpf.audioIn;
        hpf.audioOut -> vca.audioIn;
        vca.audioOut -> audioOut;
    }
}
